{"ast":null,"code":"import _toConsumableArray from \"/home/hugh/Development/github.com/hughrawlinson/github-repo-organizer/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/hugh/Development/github.com/hughrawlinson/github-repo-organizer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/hugh/Development/github.com/hughrawlinson/github-repo-organizer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hugh/Development/github.com/hughrawlinson/github-repo-organizer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { useLogin } from \"../UserLogin\";\nimport { graphql } from \"@octokit/graphql\";\nimport query from \"./gitHubGraphQlQuery\";\nimport { Convert } from \"./gitHubGraphQlQueryResponseType\";\n\nfunction load(_x, _x2, _x3) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(accessToken, login, endCursor) {\n    var data, result, repos;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return graphql({\n              query: query(endCursor !== null && endCursor !== void 0 ? endCursor : \"\"),\n              headers: {\n                authorization: \"token \".concat(accessToken),\n                accept: \"application/vnd.github.vixen-preview+json\"\n              }\n            });\n\n          case 3:\n            result = _context2.sent;\n            data = Convert.toGitHubRepoQueryResponseType(\"{ data: \".concat(result, \" }\")).data;\n            _context2.next = 11;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            data = _context2.t0.data;\n\n          case 11:\n            repos = data.viewer.repositories.nodes.map(function (repo) {\n              return {\n                id: repo.id,\n                name: repo.name,\n                nameWithOwner: repo.nameWithOwner,\n                description: repo.description,\n                createdAt: repo.createdAt,\n                topics: repo.repositoryTopics.nodes.map(function (node) {\n                  return node.topic.name;\n                }),\n                stars: repo.stargazers.totalCount,\n                language: function (l) {\n                  return l && l.name;\n                }(repo.primaryLanguage),\n                isPrivate: repo.isPrivate,\n                isArchived: repo.isArchived,\n                url: repo.url,\n                owner: repo.owner.login,\n                isFork: repo.isFork,\n                licenseNickname: repo.licenseInfo && (repo.licenseInfo.nickname || repo.licenseInfo.name),\n                vulnerabilityAlerts: repo.vulnerabilityAlerts.nodes,\n                collaborators: repo.collaborators && repo.collaborators.nodes.filter(function (a) {\n                  return a.login !== login;\n                }).map(function (collaborator) {\n                  return collaborator.login;\n                }),\n                issueCount: repo.issues.totalCount,\n                pullRequestCount: repo.pullRequests.totalCount\n              };\n            });\n            return _context2.abrupt(\"return\", [repos, data.viewer.repositories.totalCount, data.viewer.repositories.pageInfo.endCursor]);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return _load.apply(this, arguments);\n}\n\nfunction recurseLoad(_x4, _x5, _x6, _x7, _x8) {\n  return _recurseLoad.apply(this, arguments);\n}\n\nfunction _recurseLoad() {\n  _recurseLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accessToken, login, repos, setRepositories, endCursor) {\n    var _yield$load, _yield$load2, loadedRepos, totalCount, newEndCursor, newRepos;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return load(accessToken, login, endCursor);\n\n          case 2:\n            _yield$load = _context3.sent;\n            _yield$load2 = _slicedToArray(_yield$load, 3);\n            loadedRepos = _yield$load2[0];\n            totalCount = _yield$load2[1];\n            newEndCursor = _yield$load2[2];\n            newRepos = [].concat(_toConsumableArray(repos), _toConsumableArray(loadedRepos));\n\n            if (newRepos.length < totalCount) {\n              recurseLoad(accessToken, login, newRepos, setRepositories, newEndCursor);\n            }\n\n            setRepositories(newRepos);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _recurseLoad.apply(this, arguments);\n}\n\nexport function useRepositories() {\n  var login = useLogin();\n\n  var _useState = useState([]),\n      repositories = _useState[0],\n      setRepositories = _useState[1];\n\n  useEffect(function () {\n    var cancelled = false;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (login.hasOwnProperty(\"accessToken\")) {\n                recurseLoad(login.accessToken, login.user.login, repositories, setRepositories);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, []);\n  return [repositories, function () {\n    return setRepositories([]);\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}