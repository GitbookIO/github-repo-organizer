{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Octokit } from \"@octokit/rest\";\nimport { useEffect } from \"react\";\nimport { createLocalStorageStateHook } from \"use-local-storage-state\";\nconst authURL = \"https://github-auth-backend-hugh.glitch.me/start_auth\";\n// function isUnauthorizedUseLogin(login: unknown): login is UnauthorizedUseLogin {\n//   return (login as UnauthorizedUseLogin).startLogin !== undefined;\n// }\nconst octokit_outside = new Octokit(); // type Await<T> = T extends {\n//   then(onfulfilled?: (value: infer U) => unknown): unknown;\n// }\n//   ? U\n//   : T;\n\nconst startLoginResult = {\n  startLogin: function startLogin() {\n    const query = {\n      redirect_uri: window.location.origin + window.location.pathname,\n      scope: \"repo\"\n    };\n    const authProxyUrl = `${authURL}?${new URLSearchParams(query)}`;\n    window.location.assign(authProxyUrl);\n  }\n};\nconst useLoginDetails = createLocalStorageStateHook(\"LoginDetails\", null);\nexport function useLogin() {\n  const [storedLoginDetails, setStoredLoginDetails] = useLoginDetails();\n  useEffect(() => {\n    if (!storedLoginDetails) {\n      const query = new URLSearchParams(window.location.search);\n      const accessToken = query.get(\"access_token\");\n\n      if (accessToken) {\n        let cancelled = false;\n\n        (async () => {\n          const octokit = new Octokit({\n            auth: `token ${accessToken}`\n          });\n          const user = await octokit.users.getAuthenticated();\n\n          if (!cancelled) {\n            setStoredLoginDetails({\n              accessToken,\n              user\n            });\n          }\n        })();\n\n        return () => {\n          cancelled = true;\n        };\n      }\n    }\n  }, [setStoredLoginDetails, Octokit]);\n\n  if (storedLoginDetails) {\n    return _objectSpread(_objectSpread({}, storedLoginDetails), {}, {\n      invalidateStoredLogin: function () {\n        setStoredLoginDetails(null);\n      }\n    });\n  }\n\n  return startLoginResult;\n} // export { isUnauthorizedUseLogin, isAuthorizedUseLogin };","map":null,"metadata":{},"sourceType":"module"}