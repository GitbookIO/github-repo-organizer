{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\nexport default function DateTypeProvider(props) {\n  return /*#__PURE__*/_jsx(DataTypeProvider, _objectSpread({\n    formatterComponent: ({\n      value\n    }) => {\n      // TODO: the type from quicktype should handle this, not sure why it's like this.\n      const d = new Date(value);\n      return /*#__PURE__*/_jsx(_Fragment, {\n        children: d.toLocaleDateString()\n      });\n    },\n    availableFilterOperations: [\"contains\", \"greaterThan\", \"lessThan\", \"greaterThanOrEqual\", \"lessThanOrEqual\"]\n  }, props));\n}","map":null,"metadata":{},"sourceType":"module"}