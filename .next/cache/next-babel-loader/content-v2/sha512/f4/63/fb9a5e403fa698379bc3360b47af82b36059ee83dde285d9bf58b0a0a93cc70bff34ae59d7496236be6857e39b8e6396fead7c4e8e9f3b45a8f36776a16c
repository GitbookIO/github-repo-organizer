{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useLogin } from \"../UserLogin\";\nimport { graphql } from \"@octokit/graphql\";\nimport query from \"./gitHubGraphQlQuery\";\nimport { Convert } from \"./gitHubGraphQlQueryResponseType\";\n\nasync function load(accessToken, login, endCursor) {\n  let data;\n\n  try {\n    const result = await graphql({\n      query: query(endCursor !== null && endCursor !== void 0 ? endCursor : \"\"),\n      headers: {\n        authorization: `token ${accessToken}`,\n        accept: \"application/vnd.github.vixen-preview+json\"\n      }\n    });\n    data = Convert.toGitHubRepoQueryResponseType(`{ data: ${result} }`).data;\n  } catch (error) {\n    console.log(error);\n    data = error.data;\n  }\n\n  const repos = data.viewer.repositories.nodes.map(repo => ({\n    id: repo.id,\n    name: repo.name,\n    nameWithOwner: repo.nameWithOwner,\n    description: repo.description,\n    createdAt: repo.createdAt,\n    topics: repo.repositoryTopics.nodes.map(node => node.topic.name),\n    stars: repo.stargazers.totalCount,\n    language: (l => l && l.name)(repo.primaryLanguage),\n    isPrivate: repo.isPrivate,\n    isArchived: repo.isArchived,\n    url: repo.url,\n    owner: repo.owner.login,\n    isFork: repo.isFork,\n    licenseNickname: repo.licenseInfo && (repo.licenseInfo.nickname || repo.licenseInfo.name),\n    vulnerabilityAlerts: repo.vulnerabilityAlerts.nodes,\n    collaborators: repo.collaborators && repo.collaborators.nodes.filter(a => a.login !== login).map(collaborator => collaborator.login),\n    issueCount: repo.issues.totalCount,\n    pullRequestCount: repo.pullRequests.totalCount\n  }));\n  return [repos, data.viewer.repositories.totalCount, data.viewer.repositories.pageInfo.endCursor];\n}\n\nasync function recurseLoad(accessToken, login, repos, setRepositories, endCursor) {\n  const [loadedRepos, totalCount, newEndCursor] = await load(accessToken, login, endCursor);\n  const newRepos = [...repos, ...loadedRepos];\n\n  if (newRepos.length < totalCount) {\n    recurseLoad(accessToken, login, newRepos, setRepositories, newEndCursor);\n  }\n\n  setRepositories(newRepos);\n}\n\nexport function useRepositories() {\n  const login = useLogin();\n  const {\n    0: repositories,\n    1: setRepositories\n  } = useState([]);\n  useEffect(() => {\n    let cancelled = false;\n\n    (async () => {\n      if (login.hasOwnProperty(\"accessToken\")) {\n        recurseLoad(login.accessToken, login.user.login, repositories, setRepositories);\n      }\n    })();\n  }, []);\n  return [repositories, () => setRepositories([])];\n}","map":null,"metadata":{},"sourceType":"module"}