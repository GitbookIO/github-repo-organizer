{"version":3,"sources":["components/LogIn.js","components/RepositoryTable.js","components/Repos.js","components/Topics.js","components/Licenses.js","components/Languages.js","App.js","columns/index.js","columns/description.js","columns/name.js","columns/createdAt.js","columns/repositoryTopics.js","sagas/gitHubGraphQlQuery.js","sagas/index.js","reducers/index.js","index.js"],"names":["LogIn","Fragment","Typography","variant","paragraph","Component","DateTypeProvider","props","formatterComponent","value","toLocaleDateString","LinkTypeProvider","href","title","ChipListProvider","map","v","Chip","style","margin","label","BooleanTypeProvider","ArrayLengthProvider","length","tableColumnExtensions","columnName","wordWrapEnabled","connect","state","gridState","dispatch","setGridState","type","withStyles","theme","repositories","Paper","columns","name","getCellValue","row","url","Date","createdAt","collaborators","collaborator","login","rows","for","defaultFilters","filters","filteringState","onFiltersChange","defaultSorting","sorting","sortingState","onSortingChange","defaultCurrentPage","pageSize","searchState","onValueChange","columnExtensions","showSortingControls","showFilterSelector","hiddenColumnNames","columnVisibilityState","onHiddenColumnNamesChange","Repos","tags","flatMap","repo","topics","reduce","acc","el","data","Object","entries","topicName","topicCount","direction","licenseNickname","license","licenseCount","languages","language","languageCount","App","drawerOpen","ifLoggedOut","bind","ifLoggedIn","ifRepositories","this","setState","child","loggedIn","classes","CssBaseline","className","AppBar","Toolbar","IconButton","menuButton","color","aria-label","onClick","toggleDrawer","grow","Button","startLogIn","refresh","Drawer","open","onClose","onKeyDown","List","ListItem","button","to","process","ListItemText","primary","content","appBarSpacer","exact","path","component","queryParams","qs","parse","location","search","JSON","Topics","Licenses","Languages","loadRepositories","loadUser","root","flexGrow","marginLeft","marginRight","mixins","toolbar","padding","spacing","height","overflow","description","getColumnName","getColumnType","dataType","dataSource","getColumnFragment","fragment","repositoryTopics","query","endCursor","values","column","init","watchInit","watchStartLogIn","startLoadRepos","watchLoadRepositories","watchRefresh","startLoadUser","watchLoadUser","rootSaga","octokit","Octokit","window","substring","access_token","put","takeEvery","origin","pathname","authProxyUrl","stringify","select","accessToken","user","call","graphql","headers","authorization","accept","repos","viewer","nodes","id","nameWithOnwer","nameWithOwner","node","topic","stars","stargazers","totalCount","l","primaryLanguage","isPrivate","isArchived","owner","isFork","licenseInfo","nickname","vulnerabilityAlerts","filter","a","issueCount","issues","pullRequestCount","pullRequests","pageInfo","auth","users","getAuthenticated","activity","checkStarringRepo","starRepo","all","initialState","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","sagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80ac1637.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nclass LogIn extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Typography variant=\"display1\">\n          Log in!\n        </Typography>\n        <Typography paragraph={true}>\n          Please log in with GitHub to start organizing your repositories.\n        </Typography>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LogIn;\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\n// import { connect } from 'react-redux';\nimport { Grid, Table, TableHeaderRow, TableFilterRow, Toolbar, SearchPanel, ColumnChooser, TableColumnVisibility, PagingPanel } from '@devexpress/dx-react-grid-material-ui';\nimport { FilteringState, IntegratedFiltering, SearchState, SortingState, IntegratedSorting, PagingState, IntegratedPaging } from '@devexpress/dx-react-grid';\nimport { DataTypeProvider } from '@devexpress/dx-react-grid';\n\nconst styles = theme => ({});\n\nconst DateTypeProvider = props => (\n  <DataTypeProvider\n    formatterComponent={({value}) => value.toLocaleDateString()}\n    {...props}\n  />\n);\n\nconst LinkTypeProvider = props => (\n  <DataTypeProvider\n    formatterComponent={({value:{href, title}}) => (<a href={href}>{title}</a>)}\n    {...props}\n  />\n);\n\nconst ChipListProvider = props => (\n  <DataTypeProvider\n    formatterComponent={({value}) => (value ? <>\n      {value.map((v) => (<Chip style={{margin: \"3px\"}} key={v} label={v}/>))}\n  </> : null)}\n  {...props}\n  />\n);\n\nconst BooleanTypeProvider = props => (\n  <DataTypeProvider\n    formatterComponent={({value}) => (<Chip label={value ? \"True\" : \"False\"} />)}\n    {...props}\n  />\n);\n\nconst ArrayLengthProvider = props => (\n  <DataTypeProvider\n    formatterComponent={({value}) => value.length}\n    {...props}\n  />\n);\n\nconst tableColumnExtensions = [\n  { columnName: 'topics', wordWrapEnabled: true },\n  { columnName: 'description', wordWrapEnabled: true },\n];\n\nfunction RepositoryTable({repositories, gridState, setGridState}) {\n  function setFilteringState(filteringState) {\n    setGridState({...gridState, filteringState});\n  }\n\n  function setSortingState(sortingState) {\n    setGridState({...gridState, sortingState});\n  }\n\n  function setSearchState(searchState) {\n    setGridState({...gridState, searchState});\n  }\n\n  function setColumnVisibilityState(columnVisibilityState) {\n    setGridState({...gridState, columnVisibilityState});\n  }\n\n  return (\n    <Paper>\n      <Grid\n        columns={[{\n          name: 'name',\n          title: 'Name',\n          getCellValue: row => ({\n            href: row.url,\n            title: row.name\n          })\n        },{\n          name: 'description',\n          title: 'Description'\n        },{\n          name: 'createdAt',\n          title: 'Created At',\n          getCellValue: row => new Date(row.createdAt)\n        },{\n          name: 'topics',\n          title: 'Topics',\n        },{\n          name: 'stars',\n          title: 'Stars'\n        },{\n          name: 'language',\n          title: 'Language'\n        },{\n          name: 'owner',\n          title: 'Owner'\n        },{\n          name: 'isPrivate',\n          title: 'Private',\n        },{\n          name: 'isArchived',\n          title: 'Archived',\n        },{\n          name: 'isFork',\n          title: 'Fork',\n        },{\n          name: 'licenseNickname',\n          title: 'License'\n        },{\n          name: 'vulnerabilityAlerts',\n          title: 'Vulnerability Alerts'\n        },{\n          name: 'collaborators',\n          title: 'Collaborators',\n          getCellValue: row => row.collaborators && row.collaborators.map(collaborator => collaborator.login)\n        },{\n          name: 'issueCount',\n          title: 'Open Issue Count'\n        },{\n          name: 'pullRequestCount',\n          title: 'Open Pull Request Count'\n        }]}\n    rows={repositories}>\n    <DateTypeProvider\n    for={['createdAt']}\n  />\n    <LinkTypeProvider\n      for={['name']}\n    />\n    <ChipListProvider\n      for={['topics', 'collaborators']}\n    />\n    <BooleanTypeProvider\n      for={['isPrivate', 'isArchived', 'isFork']}\n    />\n    <ArrayLengthProvider\n      for={['vulnerabilityAlerts']}\n    />\n    <FilteringState\n      defaultFilters={[]}\n      filters={gridState.filteringState}\n      onFiltersChange={setFilteringState}\n    />\n    <SortingState\n      defaultSorting={[]}\n      sorting={gridState.sortingState}\n      onSortingChange={setSortingState}\n    />\n    <PagingState\n      defaultCurrentPage={0}\n      pageSize={40}\n    />\n    <SearchState\n      value={gridState.searchState}\n      onValueChange={setSearchState}\n    />\n    <IntegratedFiltering/>\n    <IntegratedSorting/>\n    <IntegratedPaging/>\n    <Table columnExtensions={tableColumnExtensions}/>\n    <TableHeaderRow showSortingControls />\n    <TableFilterRow showFilterSelector />\n    <TableColumnVisibility\n      hiddenColumnNames={gridState.columnVisibilityState}\n      onHiddenColumnNamesChange={setColumnVisibilityState}\n    />\n    <Toolbar/>\n    <SearchPanel />\n    <ColumnChooser />\n    <PagingPanel />\n  </Grid>\n</Paper>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  gridState: state.gridState\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setGridState: gridState => dispatch({\n    type: \"SET_GRID_STATE\",\n    gridState\n  })\n})\n\nexport default\n    connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(withStyles(styles)(RepositoryTable));\n","import React from 'react';\nimport RepositoryTable from './RepositoryTable';\n\nexport default function Repos(props) {\n  return (<>\n    <RepositoryTable\n      repositories={props.repositories}/>\n  </>);\n}\n","import React from 'react';\nimport { Grid, Table, TableHeaderRow } from '@devexpress/dx-react-grid-material-ui';\nimport {\n    SortingState,\n    IntegratedSorting,\n} from '@devexpress/dx-react-grid';\nimport Paper from '@material-ui/core/Paper';\n\nconst prepareTags = repositories => repositories\n      .flatMap(repo => repo.topics)\n      .reduce((acc, el) => ({\n          ...acc,\n          [el]: acc[el] ? acc[el] + 1 : 1\n      }), {});\n\nexport default (props) => {\n  const tags = prepareTags(props.repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    topicName: key,\n    topicCount: value\n  }));\n  return (<Paper>\n    <Grid\n      columns={[{\n        name: 'topicName',\n        title: 'Topic Name'\n      },{\n        name: 'topicCount',\n        title: 'Topic Count'\n      }]}\n      rows={data}>\n      <SortingState\n        defaultSorting={[{ columnName: 'topicCount', direction: 'desc' }]}\n      />\n      <IntegratedSorting />\n      <Table />\n      <TableHeaderRow showSortingControls />\n    </Grid>\n  </Paper>);\n}\n","import React from 'react';\nimport { Grid, Table, TableHeaderRow } from '@devexpress/dx-react-grid-material-ui';\nimport {\n    SortingState,\n    IntegratedSorting,\n} from '@devexpress/dx-react-grid';\nimport Paper from '@material-ui/core/Paper';\n\nconst prepareTags = repositories => repositories\n      .map(repo => repo.licenseNickname)\n      .reduce((acc, el) => ({\n          ...acc,\n          [el]: acc[el] ? acc[el] + 1 : 1\n      }), {});\n\nexport default (props) => {\n  const tags = prepareTags(props.repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    license: key,\n    licenseCount: value\n  }));\n  return (<Paper>\n    <Grid\n      columns={[{\n        name: 'license',\n        title: 'License'\n      },{\n        name: 'licenseCount',\n        title: 'License Count'\n      }]}\n      rows={data}>\n      <SortingState\n        defaultSorting={[{ columnName: 'licenseCount', direction: 'desc' }]}\n      />\n      <IntegratedSorting />\n      <Table />\n      <TableHeaderRow showSortingControls />\n    </Grid>\n  </Paper>);\n}\n","import React from 'react';\nimport { Grid, Table, TableHeaderRow } from '@devexpress/dx-react-grid-material-ui';\nimport {\n    SortingState,\n    IntegratedSorting,\n} from '@devexpress/dx-react-grid';\nimport Paper from '@material-ui/core/Paper';\n\nconst prepareLanguages = repositories => repositories\n      .map(repo => repo.language)\n      .reduce((acc, el) => ({\n          ...acc,\n          [el]: acc[el] ? acc[el] + 1 : 1\n      }), {});\n\nexport default (props) => {\n  const languages = prepareLanguages(props.repositories);\n  const data = Object.entries(languages).map(([key, value]) => ({\n    language: key,\n    languageCount: value\n  }));\n  return (<Paper>\n    <Grid\n      columns={[{\n        name: 'language',\n        title: 'Language'\n      },{\n        name: 'languageCount',\n        title: 'Count'\n      }]}\n      rows={data}>\n      <SortingState\n        defaultSorting={[{ columnName: 'languageCount', direction: 'desc' }]}\n      />\n      <IntegratedSorting />\n      <Table />\n      <TableHeaderRow showSortingControls />\n    </Grid>\n  </Paper>);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { connect } from 'react-redux';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport qs from 'query-string';\n\nimport LogIn from './components/LogIn.js';\nimport Repos from './components/Repos.js';\nimport Topics from './components/Topics.js'\nimport Licenses from './components/Licenses.js'\nimport Languages from './components/Languages.js'\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    height: '100vh',\n    overflow: 'auto',\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      drawerOpen: false\n    };\n\n    this.ifLoggedOut = this.ifLoggedOut.bind(this);\n    this.ifLoggedIn = this.ifLoggedIn.bind(this);\n    this.ifRepositories = this.ifRepositories.bind(this);\n  }\n\n  toggleDrawer(value) {\n    this.setState(state => ({\n      ...state,\n      drawerOpen: value ? value : !state.drawerOpen\n    }));\n  }\n\n  ifRepositories(child) {\n    if (this.props.repositories) {\n      return child;\n    }\n    return null\n  }\n\n  ifLoggedOut(child) {\n    if(!this.props.loggedIn) {\n      return child;\n    }\n    return null;\n  }\n\n  ifLoggedIn(child) {\n    if(this.props.loggedIn) {\n      return child;\n    }\n    return null;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <CssBaseline/>\n        <Router>\n        <div className=\"App\">\n          <AppBar>\n            <Toolbar>\n              {this.ifLoggedIn(\n                <IconButton\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"Menu\"\n                  onClick={() => this.toggleDrawer()}\n                      >\n                  <MenuIcon />\n                </IconButton>\n              )}\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                GitHub Repo Organizer\n              </Typography>\n              {this.ifLoggedOut(\n                 <Button onClick={this.props.startLogIn} color=\"inherit\">Login</Button>\n              )}\n              {this.ifLoggedIn(\n                <Button onClick={this.props.refresh} color=\"inherit\">Refresh</Button>\n              )}\n            </Toolbar>\n          </AppBar>\n          <Drawer\n            open={this.state.drawerOpen}\n            onClose={() => this.toggleDrawer(false)}\n          >\n            <div\n              onClick={() => this.toggleDrawer(false)}\n              onKeyDown={() => this.toggleDrawer(false)}>\n              <List>\n                <ListItem button>\n                  <Link to={process.env.PUBLIC_URL + \"/\"}>\n                    <ListItemText primary=\"Repositories\" />\n                  </Link>\n                </ListItem>\n                <ListItem button>\n                  <Link to={process.env.PUBLIC_URL + \"/topics\"}>\n                    <ListItemText primary=\"Topics\" />\n                  </Link>\n                </ListItem>\n                <ListItem button>\n                  <Link to={process.env.PUBLIC_URL + \"/licenses\"}>\n                    <ListItemText primary=\"Licenses\" />\n                  </Link>\n                </ListItem>\n                <ListItem button>\n                  <Link to={process.env.PUBLIC_URL + \"/languages\"}>\n                    <ListItemText primary=\"Languages\" />\n                  </Link>\n                </ListItem>\n              </List>\n            </div>\n          </Drawer>\n          <main className={classes.content}>\n            <div className={classes.appBarSpacer} />\n            {this.ifLoggedOut(<LogIn/>)}\n            {this.ifLoggedIn(\n            <Switch>\n              <Route\n                  exact\n                  path={process.env.PUBLIC_URL + \"/\"}\n              component={(props) => {\n                  const queryParams = qs.parse(props.location.search);\n                if (queryParams.gridState) {\n                  this.props.setGridState(\n                    JSON.parse(queryParams.gridState)\n                  );\n                }\n                return (<Repos\n                  queryParams={queryParams}\n                  repositories={this.props.repositories || []}\n                />)\n              }}\n              />\n              <Route exact path={process.env.PUBLIC_URL + \"/topics\"} component={() => (\n                  <Topics repositories={this.props.repositories}/>\n              )}/>\n              <Route exact path={process.env.PUBLIC_URL + \"/licenses\"} component={() => (\n                  <Licenses repositories={this.props.repositories}/>\n              )}/>\n              <Route exact path={process.env.PUBLIC_URL + \"/languages\"} component={() => (\n                  <Languages repositories={this.props.repositories}/>\n              )}/>\n            </Switch>\n            )}\n            </main>\n          </div>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loggedIn: state.loggedIn,\n  repositories: state.repositories\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  startLogIn: () => dispatch({type: 'START_LOG_IN'}),\n  refresh: () => dispatch({type: 'REFRESH_REPOSITORIES'}),\n  loadRepositories: () => dispatch({type: 'START_LOAD_REPOSITORIES'}),\n  loadUser: () => dispatch({type: 'START_LOAD_USER'}),\n  setGridState: (gridState) => dispatch({\n    type: 'SET_GRID_STATE',\n    gridState\n  })\n});\n\nexport default\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(withStyles(styles)(App));\n","import description from './description';\nimport name from './name';\nimport createdAt from './createdAt';\nimport repositoryTopics from './repositoryTopics';\n\nexport default {\n  description,\n  name,\n  createdAt,\n  repositoryTopics\n};\n","export default {\n  getColumnName: () => \"description\",\n  getColumnType: () => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\"\n  }),\n  getColumnFragment: () => ({\n    name: 'description',\n    fragment: 'fragment description on Repository { description } '\n  })\n};\n","export default {\n  getColumnName: () => \"name\",\n  getColumnType: () => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\"\n  }),\n  getColumnFragment: () => ({\n    name: 'name',\n    fragment: 'fragment name on Repository { name } '\n  })\n};\n","export default {\n  getColumnName: () => \"createdAt\",\n  getColumnType: () => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\"\n  }),\n  getColumnFragment: () => ({\n    name: 'createdAt',\n    fragment: ' fragment createdAt on Repository { createdAt } '\n  })\n};\n","export default {\n  getColumnName: () => \"repositoryTopics\",\n  getColumnType: () => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\"\n  }),\n  getColumnFragment: () => ({\n    name: 'repositoryTopics',\n    fragment: 'fragment repositoryTopics on Repository { repositoryTopics(first:100) { nodes { topic { id name } } } }'\n  })\n};\n","import columns from '../columns';\n\nconst query = (endCursor) => `query {\n    viewer {\n      repositories (first:100${endCursor ? \", after:\\\"\" + endCursor + '\"' : ''}) {\n        pageInfo {\n          endCursor\n        }\n        totalCount\n        nodes {\n          id\n          ${Object.values(columns).map(column => `...${column.getColumnFragment().name}\\n`)\n  }\n          ...stargazers\n          ...primaryLanguage\n          ...private\n          ...archived\n          ...issues\n          ...pullRequestCount\n          ...owner\n          ...nameWithOwner\n          ...url\n          ...fork\n          ...licenses\n          ...vulnerabilityAlerts\n          ...collaborators\n        }\n      }\n    }\n  }\n\n${Object.values(columns).map(column => column.getColumnFragment().fragment)\n  }\n\nfragment stargazers on Repository {\n  stargazers {\n    totalCount\n  }\n}\n\nfragment primaryLanguage on Repository {\n  primaryLanguage {\n    name\n  }\n}\n\nfragment private on Repository {\n  isPrivate\n}\n\nfragment archived on Repository {\n  isArchived\n}\n\nfragment issues on Repository {\n  issues (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment pullRequestCount on Repository {\n  pullRequests (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment owner on Repository {\n  owner {\n    login\n  }\n}\n\nfragment nameWithOwner on Repository {\n  nameWithOwner\n}\n\nfragment url on Repository {\n  url\n}\n\nfragment fork on Repository {\n  isFork\n}\n\nfragment licenses on Repository {\n  licenseInfo {\n    name\n    nickname\n  }\n}\n\nfragment vulnerabilityAlerts on Repository {\n  vulnerabilityAlerts (first:50){\n    nodes {\n      securityVulnerability {\n        package {\n          name\n        }\n        advisory {\n          description\n          summary\n        }\n      }\n    }\n  }\n}\n\nfragment collaborators on Repository {\n  collaborators (first: 50){\n    nodes {\n      name\n      login\n    }\n  }\n}\n`\n\nexport default query;\n","import {\n  put,\n  takeEvery,\n  all,\n  select,\n  call\n} from 'redux-saga/effects';\nimport qs from 'querystring';\nimport { Octokit } from '@octokit/rest';\n// const graphql = require('@octokit/graphql');\nimport { graphql } from '@octokit/graphql';\nimport query from './gitHubGraphQlQuery';\n\nlet octokit = new Octokit();\n\nconst authURL = 'https://github-auth-backend-hugh.glitch.me/start_auth';\n\nexport function* init() {\n  // get from local storage or get from url\n  const query = qs.parse(window.location.search.substring(1));\n\n  if (query.access_token) {\n    yield put({\n      type: 'SET_ACCESS_TOKEN',\n      access_token: query.access_token\n    });\n    yield startLoadUser();\n  }\n}\n\nexport function* watchInit() {\n  yield takeEvery('INIT', init);\n}\n\nexport function* startLogIn() {\n  const query = {\n    'redirect_uri': window.location.origin + window.location.pathname,\n    'scope': ['repo']\n  };\n\n  const authProxyUrl = `${authURL}?${qs.stringify(query)}`;\n\n  yield window.location = authProxyUrl;\n}\n\nexport function* watchStartLogIn() {\n  yield takeEvery('START_LOG_IN', startLogIn);\n}\n\nexport function* startLoadRepos(endCursor) {\n  const accessToken = yield select(state => state.accessToken);\n  const user = yield select(state => state.user.login);\n\n  let data;\n\n  try {\n    data = yield call(() => graphql({\n      query: query(endCursor),\n      headers: {\n        authorization: `token ${accessToken}`,\n        accept: 'application/vnd.github.vixen-preview+json'\n      }\n    }));\n  } catch (error) {\n    data = error.data\n  }\n\n  // TODO handle when error is null\n\n  const repos = data.viewer.repositories.nodes.map(repo => ({\n    id: repo.id,\n    name: repo.name,\n    nameWithOnwer: repo.nameWithOwner,\n    description: repo.description,\n    createdAt: repo.createdAt,\n    topics: repo.repositoryTopics.nodes.map(node => node.topic.name),\n    stars: repo.stargazers.totalCount,\n    language: (l => l && l.name)(repo.primaryLanguage),\n    isPrivate: repo.isPrivate,\n    isArchived: repo.isArchived,\n    url: repo.url,\n    owner: repo.owner.login,\n    isFork: repo.isFork,\n    licenseNickname: repo.licenseInfo && (repo.licenseInfo.nickname || repo.licenseInfo.name),\n    vulnerabilityAlerts: repo.vulnerabilityAlerts.nodes,\n    collaborators: repo.collaborators && repo.collaborators.nodes.filter(a => a.login !== user),\n    issueCount: repo.issues.totalCount,\n    pullRequestCount: repo.pullRequests.totalCount\n  }));\n\n  yield put({type: 'SET_REPOSITORIES', repositories: repos});\n\n  const repoCount = yield select(state => state.repositories.length);\n  if (repoCount < data.viewer.repositories.totalCount) {\n    yield startLoadRepos(data.viewer.repositories.pageInfo.endCursor);\n  }\n}\n\nexport function* watchLoadRepositories() {\n  yield takeEvery('START_LOAD_REPOSITORIES', startLoadRepos);\n}\n\nfunction* refresh() {\n  yield put({type: 'DELETE_REPOSITORIES'});\n  yield startLoadRepos();\n}\n\nexport function* watchRefresh() {\n  yield takeEvery('REFRESH_REPOSITORIES', refresh);\n}\n\nexport function* startLoadUser() {\n  const accessToken = yield select(state => state.accessToken);\n\n  octokit = new Octokit({\n    auth: `token ${accessToken}`\n  });\n\n  const repo = {\n    owner: 'hughrawlinson',\n    repo: 'github-repo-organizer'\n  };\n\n  const {data} = yield call(() => octokit.users.getAuthenticated());\n  if (data.login !== 'hughrawlinson') {\n    try {\n      yield call(() => octokit.activity.checkStarringRepo(repo));\n    } catch (e) {\n      yield call(() => octokit.activity.starRepo(repo));\n    }\n  }\n  yield put({type: 'SET_USER', user: data});\n  yield startLoadRepos();\n}\n\nexport function* watchLoadUser() {\n  yield takeEvery('START_LOAD_USER', startLoadUser);\n}\nexport default function* rootSaga() {\n  yield all([\n    watchInit(),\n    watchStartLogIn(),\n    watchLoadRepositories(),\n    watchLoadUser(),\n    watchRefresh()\n  ]);\n}\n","const initialState = {\n  loggedIn: false,\n  gridState: {\n    filteringState: [],\n    sortingState: [],\n    searchState: \"\",\n    columnVisibilityState: [\n      'isPrivate',\n      'isArchived',\n      'isFork',\n      'owner',\n      'licenseNickname',\n      'vulnerabilityAlerts',\n      'collaborators',\n      'issueCount'\n    ]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'SET_ACCESS_TOKEN':\n      return {\n        ...state,\n        accessToken: action.access_token,\n        loggedIn: true\n      };\n    case 'SET_REPOSITORIES':\n      return {\n        ...state,\n        repositories: [\n          ...(state.repositories || []),\n          ...action.repositories\n        ]\n      };\n    case 'DELETE_REPOSITORIES':\n      return {\n        ...state,\n        repositories: []\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.user\n      };\n    case 'SET_GRID_STATE':\n      return {\n        ...state,\n        gridState: action.gridState\n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport sagas from './sagas'\nimport { Provider } from 'react-redux';\nimport reducer from './reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(sagaMiddleware)))\nsagaMiddleware.run(sagas);\nstore.dispatch({type: \"INIT\"})\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}