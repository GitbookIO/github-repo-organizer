{"version":3,"sources":["pages/LogIn.tsx","components/RepositoryTable.tsx","pages/Repos.tsx","pages/Topics.tsx","pages/Licenses.tsx","pages/Languages.tsx","components/DrawerMenu.tsx","App.tsx","columns/index.ts","columns/description.ts","columns/name.ts","columns/createdAt.ts","columns/repositoryTopics.ts","api/gitHubGraphQlQuery.tsx","sagas/index.tsx","reducers/index.ts","index.tsx"],"names":["LogIn","Fragment","Typography","variant","paragraph","Component","styles","createStyles","DateTypeProvider","props","formatterComponent","value","toLocaleDateString","LinkTypeProvider","href","title","ChipListProvider","map","v","Chip","style","margin","label","BooleanTypeProvider","ArrayLengthProvider","length","CheckBoxProvider","type","tableColumnExtensions","columnName","wordWrapEnabled","mapStateToProps","state","gridState","mapDispatchToProps","dispatch","setGridState","StyledRepositoryTable","withStyles","ws","connect","connector","repositories","Paper","columns","name","getCellValue","row","url","Date","createdAt","collaborators","collaborator","login","rows","for","defaultFilters","filters","filteringState","onFiltersChange","defaultSorting","sorting","sortingState","onSortingChange","defaultCurrentPage","pageSize","searchState","onValueChange","columnExtensions","showSortingControls","showFilterSelector","hiddenColumnNames","columnVisibilityState","onHiddenColumnNamesChange","Repos","tags","flatMap","repo","topics","reduce","acc","el","data","Object","entries","topicName","topicCount","direction","licenseNickname","license","licenseCount","languages","language","languageCount","DrawerMenuContext","createContext","drawerOpen","toggleDrawer","_","DrawerMenuWrapper","children","useState","setDrawerOpen","Provider","newState","DrawerMenuToggleButton","useContext","IconButton","onClick","DrawerMenu","Drawer","open","onClose","onKeyDown","List","ListItem","button","to","process","ListItemText","primary","qs","require","loggedIn","startLogIn","refresh","loadRepositories","loadUser","stylist","theme","root","flexGrow","grow","menuButton","marginLeft","marginRight","appBarSpacer","mixins","toolbar","content","padding","spacing","height","overflow","classes","ifLoggedOut","child","ifLoggedIn","CssBaseline","className","AppBar","Toolbar","color","aria-label","Button","exact","path","component","queryParams","parse","location","search","JSON","Topics","Licenses","Languages","exports","description","getColumnName","getColumnType","dataType","dataSource","getColumnFragment","fragment","repositoryTopics","query","endCursor","values","column","init","watchInit","watchStartLogIn","startLoadRepos","watchLoadRepositories","watchRefresh","startLoadUser","watchLoadUser","rootSaga","octokit","Octokit","window","substring","access_token","put","takeEvery","redirect_uri","origin","pathname","scope","authProxyUrl","stringify","assign","select","accessToken","user","call","graphql","headers","authorization","accept","console","log","repos","viewer","nodes","id","nameWithOnwer","nameWithOwner","node","topic","stars","stargazers","totalCount","l","primaryLanguage","isPrivate","isArchived","owner","isFork","licenseInfo","nickname","vulnerabilityAlerts","filter","a","issueCount","issues","pullRequestCount","pullRequests","pageInfo","auth","users","getAuthenticated","activity","checkRepoIsStarredByAuthenticatedUser","starRepoForAuthenticatedUser","all","initialState","undefined","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","sagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bd940e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass LogIn extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h1\">Log in!</Typography>\n        <Typography paragraph={true}>\n          Please log in with GitHub to start organizing your repositories.\n        </Typography>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LogIn;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n// import PropTypes from 'prop-types';\nimport { createStyles, withStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Chip from \"@material-ui/core/Chip\";\n// import { connect } from 'react-redux';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableFilterRow,\n  Toolbar,\n  SearchPanel,\n  ColumnChooser,\n  TableColumnVisibility,\n  PagingPanel,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {\n  FilteringState,\n  IntegratedFiltering,\n  SearchState,\n  SortingState,\n  IntegratedSorting,\n  PagingState,\n  IntegratedPaging,\n} from \"@devexpress/dx-react-grid\";\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\nimport { RootState } from \"../index\";\nimport { Dispatch } from \"redux\";\nimport { GridState } from \"../reducers\";\n\nconst styles = createStyles({});\n\nconst DateTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => value.toLocaleDateString()}\n    {...props}\n  />\n);\n\nconst LinkTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value: { href, title } }) => (\n      <a href={href}>{title}</a>\n    )}\n    {...props}\n  />\n);\n\nconst ChipListProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }: { value: string[] }) =>\n      value ? (\n        <>\n          {value.map((v) => (\n            <Chip style={{ margin: \"3px\" }} key={v} label={v} />\n          ))}\n        </>\n      ) : null\n    }\n    {...props}\n  />\n);\n\nconst BooleanTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => (\n      <Chip label={value ? \"True\" : \"False\"} />\n    )}\n    {...props}\n  />\n);\n\nconst ArrayLengthProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => value.length}\n    {...props}\n  />\n);\n\nconst CheckBoxProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => <input type=\"checkbox\" value={value} />}\n    {...props}\n  />\n);\n\nconst tableColumnExtensions = [\n  { columnName: \"topics\", wordWrapEnabled: true },\n  { columnName: \"description\", wordWrapEnabled: true },\n];\n\ntype RepositoryTableProps = {\n  repositories: unknown[];\n  gridState: GridState;\n  setGridState: (gridState: GridState) => any;\n};\n\ntype Collaborator = {\n  login: string;\n};\n\nfunction RepositoryTable({\n  repositories,\n  gridState,\n  setGridState,\n}: RepositoryTableProps) {\n  function setFilteringState(filteringState: any) {\n    setGridState({ ...gridState, filteringState });\n  }\n\n  function setSortingState(sortingState: any) {\n    setGridState({ ...gridState, sortingState });\n  }\n\n  function setSearchState(searchState: any) {\n    setGridState({ ...gridState, searchState });\n  }\n\n  function setColumnVisibilityState(columnVisibilityState: any) {\n    setGridState({ ...gridState, columnVisibilityState });\n  }\n\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"selected\",\n            title: \"Selected\",\n            getCellValue: (row) => false,\n          },\n          {\n            name: \"name\",\n            title: \"Name\",\n            getCellValue: (row) => ({\n              href: row.url,\n              title: row.name,\n            }),\n          },\n          {\n            name: \"description\",\n            title: \"Description\",\n          },\n          {\n            name: \"createdAt\",\n            title: \"Created At\",\n            getCellValue: (row) => new Date(row.createdAt),\n          },\n          {\n            name: \"topics\",\n            title: \"Topics\",\n          },\n          {\n            name: \"stars\",\n            title: \"Stars\",\n          },\n          {\n            name: \"language\",\n            title: \"Language\",\n          },\n          {\n            name: \"owner\",\n            title: \"Owner\",\n          },\n          {\n            name: \"isPrivate\",\n            title: \"Private\",\n          },\n          {\n            name: \"isArchived\",\n            title: \"Archived\",\n          },\n          {\n            name: \"isFork\",\n            title: \"Fork\",\n          },\n          {\n            name: \"licenseNickname\",\n            title: \"License\",\n          },\n          {\n            name: \"vulnerabilityAlerts\",\n            title: \"Vulnerability Alerts\",\n          },\n          {\n            name: \"collaborators\",\n            title: \"Collaborators\",\n            getCellValue: (row) =>\n              row.collaborators &&\n              row.collaborators.map(\n                (collaborator: Collaborator) => collaborator.login\n              ),\n          },\n          {\n            name: \"issueCount\",\n            title: \"Open Issue Count\",\n          },\n          {\n            name: \"pullRequestCount\",\n            title: \"Open Pull Request Count\",\n          },\n        ]}\n        rows={repositories}\n      >\n        <DateTypeProvider for={[\"createdAt\"]} />\n        <LinkTypeProvider for={[\"name\"]} />\n        <ChipListProvider for={[\"topics\", \"collaborators\"]} />\n        <BooleanTypeProvider for={[\"isPrivate\", \"isArchived\", \"isFork\"]} />\n        <ArrayLengthProvider for={[\"vulnerabilityAlerts\"]} />\n        <CheckBoxProvider for={[\"selected\"]} />\n        <FilteringState\n          defaultFilters={[]}\n          filters={gridState.filteringState}\n          onFiltersChange={setFilteringState}\n        />\n        <SortingState\n          defaultSorting={[]}\n          sorting={gridState.sortingState}\n          onSortingChange={setSortingState}\n        />\n        <PagingState defaultCurrentPage={0} pageSize={40} />\n        <SearchState\n          value={gridState.searchState}\n          onValueChange={setSearchState}\n        />\n        <IntegratedFiltering />\n        <IntegratedSorting />\n        <IntegratedPaging />\n        <Table columnExtensions={tableColumnExtensions} />\n        <TableHeaderRow showSortingControls />\n        <TableFilterRow showFilterSelector />\n        <TableColumnVisibility\n          hiddenColumnNames={gridState.columnVisibilityState}\n          onHiddenColumnNamesChange={setColumnVisibilityState}\n        />\n        <Toolbar />\n        <SearchPanel />\n        <ColumnChooser />\n        <PagingPanel />\n      </Grid>\n    </Paper>\n  );\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  gridState: state.gridState,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setGridState: (gridState: GridState) =>\n    dispatch({\n      type: \"SET_GRID_STATE\",\n      gridState,\n    }),\n});\n\nconst ws = withStyles(styles);\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst ConnectedRepositoryTable = connector(RepositoryTable);\nconst StyledRepositoryTable = ws(ConnectedRepositoryTable);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StyledRepositoryTable);\n","import { Repository } from \"../sagas\";\nimport RepositoryTable from \"../components/RepositoryTable\";\n\ntype ReposProps = {\n  repositories: Repository[];\n  queryParams: { [key: string]: string };\n};\n\nexport default function Repos(props: ReposProps) {\n  return (\n    <>\n      <RepositoryTable repositories={props.repositories} />\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\ninterface Repository {\n  topics: string[];\n}\n\nconst prepareTags = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .flatMap((repo) => repo.topics)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\ntype TopicsProps = {\n  repositories?: Repository[];\n};\n\nexport default (props: TopicsProps) => {\n  if (!props.repositories) {\n    return <p>Loading</p>;\n  }\n  const tags = prepareTags(props.repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    topicName: key,\n    topicCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"topicName\",\n            title: \"Topic Name\",\n          },\n          {\n            name: \"topicCount\",\n            title: \"Topic Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"topicCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import React from \"react\";\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\ntype Repository = {\n  licenseNickname: string;\n};\n\nconst prepareTags = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .map((repo) => repo.licenseNickname)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\n\ntype LicensesProps = {\n  repositories?: Repository[];\n};\n\nexport default (props: LicensesProps) => {\n  if (!props.repositories) {\n    return <p>Loading</p>;\n  }\n  const tags = prepareTags(props.repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    license: key,\n    licenseCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"license\",\n            title: \"License\",\n          },\n          {\n            name: \"licenseCount\",\n            title: \"License Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"licenseCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\ntype Repository = {\n  language: string;\n};\n\nconst prepareLanguages = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .map((repo) => repo.language)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\n\ntype LanguagesProps = {\n  repositories?: Repository[];\n};\n\nexport default (props: LanguagesProps) => {\n  if (!props.repositories) {\n    return <p>Loading</p>;\n  }\n  const languages = prepareLanguages(props.repositories);\n  const data = Object.entries(languages).map(([key, value]) => ({\n    language: key,\n    languageCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"language\",\n            title: \"Language\",\n          },\n          {\n            name: \"languageCount\",\n            title: \"Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"languageCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import {\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { createContext, ReactNode, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst DrawerMenuContext = createContext({\n  drawerOpen: false,\n  toggleDrawer: (_?: boolean) => {},\n});\n\ntype DrawerMenuWrapperProps = {\n  children: ReactNode;\n};\n\nexport function DrawerMenuWrapper({ children }: DrawerMenuWrapperProps) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  function toggleDrawer(newState?: boolean) {\n    if (typeof newState === \"undefined\") {\n      setDrawerOpen(!drawerOpen);\n      return;\n    } else {\n      setDrawerOpen(newState);\n    }\n  }\n\n  return (\n    <DrawerMenuContext.Provider value={{ drawerOpen, toggleDrawer }}>\n      {children}\n    </DrawerMenuContext.Provider>\n  );\n}\n\nexport function DrawerMenuToggleButton(\n  props: React.ComponentProps<typeof IconButton>\n) {\n  const { toggleDrawer } = useContext(DrawerMenuContext);\n  return (\n    <IconButton onClick={() => toggleDrawer()}>\n      <MenuIcon />\n    </IconButton>\n  );\n}\n\nexport function DrawerMenu() {\n  const { drawerOpen, toggleDrawer } = useContext(DrawerMenuContext);\n  return (\n    <Drawer open={drawerOpen} onClose={() => toggleDrawer(false)}>\n      <div\n        onClick={() => toggleDrawer(false)}\n        onKeyDown={() => toggleDrawer(false)}\n      >\n        <List>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/\"}>\n              <ListItemText primary=\"Repositories\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/topics\"}>\n              <ListItemText primary=\"Topics\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/licenses\"}>\n              <ListItemText primary=\"Licenses\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/languages\"}>\n              <ListItemText primary=\"Languages\" />\n            </Link>\n          </ListItem>\n        </List>\n      </div>\n    </Drawer>\n  );\n}\n","import { Theme, withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport { Repository } from \"./sagas\";\nvar qs = require(\"query-string\");\n\nimport LogIn from \"./pages/LogIn\";\nimport Repos from \"./pages/Repos\";\nimport Topics from \"./pages/Topics\";\nimport Licenses from \"./pages/Licenses\";\nimport Languages from \"./pages/Languages\";\nimport { GridState } from \"./reducers\";\nimport { Dispatch } from \"redux\";\nimport { RootState } from \".\";\nimport {\n  DrawerMenuToggleButton,\n  DrawerMenuWrapper,\n  DrawerMenu,\n} from \"./components/DrawerMenu\";\nimport { ReactNode } from \"react\";\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n});\n\ntype AppProps = {\n  classes: {\n    [key: string]: string;\n  };\n  repositories?: Repository[];\n  loggedIn: boolean;\n  startLogIn: () => {};\n  refresh: () => {};\n  setGridState: (v: GridState) => {};\n};\n\nfunction App({\n  classes,\n  startLogIn,\n  refresh,\n  setGridState,\n  repositories,\n  loggedIn,\n}: AppProps) {\n  function ifLoggedOut(child: ReactNode) {\n    if (!loggedIn) {\n      return child;\n    }\n    return null;\n  }\n\n  function ifLoggedIn(child: ReactNode) {\n    if (loggedIn) {\n      return child;\n    }\n    return null;\n  }\n\n  return (\n    <DrawerMenuWrapper>\n      <CssBaseline />\n      <Router>\n        <div className=\"App\">\n          <AppBar>\n            <Toolbar>\n              {ifLoggedIn(\n                <DrawerMenuToggleButton\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"Menu\"\n                />\n              )}\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                GitHub Repo Organizer\n              </Typography>\n              {ifLoggedOut(\n                <Button onClick={startLogIn} color=\"inherit\">\n                  Login\n                </Button>\n              )}\n              {ifLoggedIn(\n                <Button onClick={refresh} color=\"inherit\">\n                  Refresh\n                </Button>\n              )}\n            </Toolbar>\n          </AppBar>\n          <DrawerMenu />\n          <main className={classes.content}>\n            <div className={classes.appBarSpacer} />\n            {ifLoggedOut(<LogIn />)}\n            {ifLoggedIn(\n              <Switch>\n                <Route\n                  exact\n                  path={process.env.PUBLIC_URL + \"/\"}\n                  component={(props: { location: Location }) => {\n                    const queryParams = qs.parse(props.location.search);\n                    if (queryParams.gridState) {\n                      setGridState(JSON.parse(queryParams.gridState));\n                    }\n                    return (\n                      <Repos\n                        queryParams={queryParams}\n                        repositories={repositories || []}\n                      />\n                    );\n                  }}\n                />\n                <Route\n                  exact\n                  path={process.env.PUBLIC_URL + \"/topics\"}\n                  component={() => <Topics repositories={repositories} />}\n                />\n                <Route\n                  exact\n                  path={process.env.PUBLIC_URL + \"/licenses\"}\n                  component={() => <Licenses repositories={repositories} />}\n                />\n                <Route\n                  exact\n                  path={process.env.PUBLIC_URL + \"/languages\"}\n                  component={() => <Languages repositories={repositories} />}\n                />\n              </Switch>\n            )}\n          </main>\n        </div>\n      </Router>\n    </DrawerMenuWrapper>\n  );\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  loggedIn: state.loggedIn,\n  repositories: state.repositories,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  startLogIn: () => dispatch({ type: \"START_LOG_IN\" }),\n  refresh: () => dispatch({ type: \"REFRESH_REPOSITORIES\" }),\n  loadRepositories: () => dispatch({ type: \"START_LOAD_REPOSITORIES\" }),\n  loadUser: () => dispatch({ type: \"START_LOAD_USER\" }),\n  setGridState: (gridState: GridState) =>\n    dispatch({\n      type: \"SET_GRID_STATE\",\n      gridState,\n    }),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst stylist = withStyles(styles);\n\nexport default stylist(connector(App));\n","import description from \"./description\";\nimport name from \"./name\";\nimport createdAt from \"./createdAt\";\nimport repositoryTopics from \"./repositoryTopics\";\nimport privateColumn from \"./private\";\n\nexport type ColumnType = {\n  dataType: string;\n  dataSource: \"GitHubGraphQL\";\n};\n\nexport type ColumnFragment = {\n  name: string;\n  fragment: string;\n};\n\ntype Column = {\n  getColumnName: () => string;\n  getColumnType: () => ColumnType;\n  getColumnFragment: () => ColumnFragment;\n};\n\nconst exports: { [key: string]: Column } = {\n  description,\n  name,\n  createdAt,\n  repositoryTopics,\n  // privateColumn,\n};\n\nexport default exports;\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"description\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"description\",\n    fragment: \"fragment description on Repository { description } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"name\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"name\",\n    fragment: \"fragment name on Repository { name } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"createdAt\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"createdAt\",\n    fragment: \" fragment createdAt on Repository { createdAt } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"repositoryTopics\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"repositoryTopics\",\n    fragment:\n      \"fragment repositoryTopics on Repository { repositoryTopics(first:100) { nodes { topic { id name } } } }\",\n  }),\n};\n","import columns from \"../columns\";\n\nconst query = (endCursor: string) => `query {\n    viewer {\n      repositories (first:100${\n        endCursor ? ', after:\"' + endCursor + '\"' : \"\"\n      }) {\n        pageInfo {\n          endCursor\n        }\n        totalCount\n        nodes {\n          id\n          ${Object.values(columns).map(\n            (column) => `...${column.getColumnFragment().name}\\n`\n          )}\n          ...stargazers\n          ...primaryLanguage\n          ...private\n          ...archived\n          ...issues\n          ...pullRequestCount\n          ...owner\n          ...nameWithOwner\n          ...url\n          ...fork\n          ...licenses\n          ...vulnerabilityAlerts\n          ...collaborators\n        }\n      }\n    }\n  }\n\n${Object.values(columns).map((column) => column.getColumnFragment().fragment)}\n\nfragment stargazers on Repository {\n  stargazers {\n    totalCount\n  }\n}\n\nfragment primaryLanguage on Repository {\n  primaryLanguage {\n    name\n  }\n}\n\nfragment private on Repository {\n  isPrivate\n}\n\nfragment archived on Repository {\n  isArchived\n}\n\nfragment issues on Repository {\n  issues (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment pullRequestCount on Repository {\n  pullRequests (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment owner on Repository {\n  owner {\n    login\n  }\n}\n\nfragment nameWithOwner on Repository {\n  nameWithOwner\n}\n\nfragment url on Repository {\n  url\n}\n\nfragment fork on Repository {\n  isFork\n}\n\nfragment licenses on Repository {\n  licenseInfo {\n    name\n    nickname\n  }\n}\n\nfragment vulnerabilityAlerts on Repository {\n  vulnerabilityAlerts (first:50){\n    nodes {\n      securityVulnerability {\n        package {\n          name\n        }\n        advisory {\n          description\n          summary\n        }\n      }\n    }\n  }\n}\n\nfragment collaborators on Repository {\n  collaborators (first: 50){\n    nodes {\n      name\n      login\n    }\n  }\n}\n`;\n\nexport default query;\n","import { put, takeEvery, all, select, call } from \"redux-saga/effects\";\nimport qs from \"querystring\";\nimport { Octokit } from \"@octokit/rest\";\n// const graphql = require('@octokit/graphql');\nimport { graphql } from \"@octokit/graphql\";\nimport query from \"../api/gitHubGraphQlQuery\";\nimport { Data } from \"../types/gitHubGraphQlQueryResponseType\";\n\nlet octokit = new Octokit();\n\nexport type Repository = {\n  id: string;\n  name: string;\n  nameWithOwner: string;\n  description: string;\n  createdAt: Date;\n  topics: string[];\n  stars: number;\n  language: string;\n  isPrivate: boolean;\n  isArchived: boolean;\n  url: string;\n  owner: string;\n  isFork: boolean;\n  licenseNickname: string;\n  vulnerabilityAlerts: unknown[];\n  collaborators: string[] | null;\n  issueCount: number;\n  pullRequestCount: number;\n};\n\nconst authURL = \"https://github-auth-backend-hugh.glitch.me/start_auth\";\n\nexport function* init() {\n  // get from local storage or get from url\n  const query = qs.parse(window.location.search.substring(1));\n\n  if (query.access_token) {\n    yield put({\n      type: \"SET_ACCESS_TOKEN\",\n      access_token: query.access_token,\n    });\n    yield startLoadUser();\n  }\n}\n\nexport function* watchInit() {\n  yield takeEvery(\"INIT\", init);\n}\n\nexport function* startLogIn() {\n  const query = {\n    redirect_uri: window.location.origin + window.location.pathname,\n    scope: [\"repo\"],\n  };\n\n  const authProxyUrl = `${authURL}?${qs.stringify(query)}`;\n\n  yield window.location.assign(authProxyUrl);\n}\n\nexport function* watchStartLogIn() {\n  yield takeEvery(\"START_LOG_IN\", startLogIn);\n}\n\nexport function* startLoadRepos(endCursor?: string): any {\n  const accessToken = yield select((state) => state.accessToken);\n  const user = yield select((state) => state.user.login);\n\n  let data: Data;\n\n  try {\n    data = yield call(() =>\n      graphql<Data>({\n        query: query(endCursor ?? \"\"),\n        headers: {\n          authorization: `token ${accessToken}`,\n          accept: \"application/vnd.github.vixen-preview+json\",\n        },\n      })\n    );\n  } catch (error) {\n    console.log(error);\n    data = error.data;\n  }\n\n  // TODO handle when error is null\n\n  const repos = data.viewer.repositories.nodes.map((repo) => ({\n    id: repo.id,\n    name: repo.name,\n    nameWithOnwer: repo.nameWithOwner,\n    description: repo.description,\n    createdAt: repo.createdAt,\n    topics: repo.repositoryTopics.nodes.map((node) => node.topic.name),\n    stars: repo.stargazers.totalCount,\n    language: ((l) => l && l.name)(repo.primaryLanguage),\n    isPrivate: repo.isPrivate,\n    isArchived: repo.isArchived,\n    url: repo.url,\n    owner: repo.owner.login,\n    isFork: repo.isFork,\n    licenseNickname:\n      repo.licenseInfo && (repo.licenseInfo.nickname || repo.licenseInfo.name),\n    vulnerabilityAlerts: repo.vulnerabilityAlerts.nodes,\n    collaborators:\n      repo.collaborators &&\n      repo.collaborators.nodes.filter((a) => a.login !== user),\n    issueCount: repo.issues.totalCount,\n    pullRequestCount: repo.pullRequests.totalCount,\n  }));\n\n  yield put({ type: \"SET_REPOSITORIES\", repositories: repos });\n\n  const repoCount = yield select((state) => state.repositories.length);\n  if (repoCount < data.viewer.repositories.totalCount) {\n    yield startLoadRepos(data.viewer.repositories.pageInfo.endCursor);\n  }\n}\n\nexport function* watchLoadRepositories() {\n  yield takeEvery(\"START_LOAD_REPOSITORIES\", startLoadRepos);\n}\n\nfunction* refresh() {\n  yield put({ type: \"DELETE_REPOSITORIES\" });\n  yield startLoadRepos();\n}\n\nexport function* watchRefresh() {\n  yield takeEvery(\"REFRESH_REPOSITORIES\", refresh);\n}\n\nexport function* startLoadUser(): any {\n  const accessToken = yield select((state) => state.accessToken);\n\n  octokit = new Octokit({\n    auth: `token ${accessToken}`,\n  });\n\n  const repo = {\n    owner: \"hughrawlinson\",\n    repo: \"github-repo-organizer\",\n  };\n\n  const { data } = yield call(() => octokit.users.getAuthenticated());\n  if (data.login !== \"hughrawlinson\") {\n    try {\n      yield call(() =>\n        octokit.activity.checkRepoIsStarredByAuthenticatedUser(repo)\n      );\n    } catch (e) {\n      yield call(() => octokit.activity.starRepoForAuthenticatedUser(repo));\n    }\n  }\n  yield put({ type: \"SET_USER\", user: data });\n  yield startLoadRepos();\n}\n\nexport function* watchLoadUser() {\n  yield takeEvery(\"START_LOAD_USER\", startLoadUser);\n}\nexport default function* rootSaga() {\n  yield all([\n    watchInit(),\n    watchStartLogIn(),\n    watchLoadRepositories(),\n    watchLoadUser(),\n    watchRefresh(),\n  ]);\n}\n","const initialGridState = {\n  filteringState: [],\n  sortingState: [],\n  searchState: \"\",\n  columnVisibilityState: [\n    \"isPrivate\",\n    \"isArchived\",\n    \"isFork\",\n    \"owner\",\n    \"licenseNickname\",\n    \"vulnerabilityAlerts\",\n    \"collaborators\",\n    \"issueCount\",\n  ],\n};\n\nconst initialState = {\n  loggedIn: false,\n  gridState: initialGridState,\n  repositories: undefined,\n};\n\nexport type GridState = typeof initialGridState;\ntype Repository = unknown;\ntype User = unknown;\n\ntype Action = {\n  type: string;\n  access_token?: string;\n  repositories?: Repository[];\n  user?: User;\n  gridState?: typeof initialState.gridState;\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case \"SET_ACCESS_TOKEN\":\n      return {\n        ...state,\n        accessToken: action.access_token,\n        loggedIn: true,\n      };\n    case \"SET_REPOSITORIES\":\n      if (!action.repositories) {\n        return state;\n      }\n      return {\n        ...state,\n        repositories: [...(state.repositories || []), ...action.repositories],\n      };\n    case \"DELETE_REPOSITORIES\":\n      return {\n        ...state,\n        repositories: [],\n      };\n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.user,\n      };\n    case \"SET_GRID_STATE\":\n      return {\n        ...state,\n        gridState: action.gridState,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  // @ts-ignore\n  reducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nsagaMiddleware.run(sagas);\nstore.dispatch({ type: \"INIT\" });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}