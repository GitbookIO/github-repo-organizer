{"version":3,"sources":["features/UserLogin/LoginStateSwitch.tsx","pages/LogIn.tsx","reducers/index.ts","components/RepositoryTable.tsx","pages/Repos.tsx","pages/Topics.tsx","pages/Licenses.tsx","pages/Languages.tsx","features/Routes/index.tsx","features/DrawerMenu/index.tsx","features/UserLogin/userLoginSlice.ts","features/UserLogin/LoginButton.tsx","features/TopNav/index.tsx","App.tsx","columns/index.ts","columns/description.ts","columns/name.ts","columns/createdAt.ts","columns/repositoryTopics.ts","api/gitHubGraphQlQuery.tsx","sagas/index.tsx","index.tsx"],"names":["LoginStateSwitch","children","selectedLoginState","useSelector","state","userLoginReducer","login","LogIn","Fragment","Typography","variant","paragraph","Component","initialState","gridState","filteringState","sortingState","searchState","columnVisibilityState","repositories","mainSlice","createSlice","name","reducers","setRepositories","payload","deleteRepositories","setGridState","actions","refresh","createAction","styles","createStyles","DateTypeProvider","props","formatterComponent","value","toLocaleDateString","LinkTypeProvider","href","title","ChipListProvider","map","v","Chip","style","margin","label","BooleanTypeProvider","ArrayLengthProvider","length","CheckBoxProvider","type","tableColumnExtensions","columnName","wordWrapEnabled","withStyles","reducer","dispatch","useAppDispatch","Paper","columns","getCellValue","row","url","Date","createdAt","collaborators","collaborator","rows","for","defaultFilters","filters","onFiltersChange","defaultSorting","sorting","onSortingChange","defaultCurrentPage","pageSize","onValueChange","columnExtensions","showSortingControls","showFilterSelector","hiddenColumnNames","onHiddenColumnNamesChange","ReposPage","tags","flatMap","repo","topics","reduce","acc","el","prepareTags","data","Object","entries","topicName","topicCount","direction","licenseNickname","license","licenseCount","languages","language","prepareLanguages","languageCount","Router","exact","path","process","component","TopicsPage","LicensesPage","LanguagesPage","DrawerMenuContext","createContext","drawerOpen","toggleDrawer","_","DrawerMenuWrapper","useState","setDrawerOpen","Provider","newState","DrawerMenuToggleButton","useContext","IconButton","onClick","DrawerMenu","Drawer","open","onClose","onKeyDown","List","ListItem","button","to","ListItemText","primary","accessToken","undefined","userLoginSlice","setAccessToken","action","access_token","setUser","user","startLogin","LoginButton","Button","grow","flexGrow","menuButton","marginLeft","marginRight","classes","AppBar","Toolbar","className","color","aria-label","theme","root","appBarSpacer","mixins","toolbar","content","padding","spacing","height","overflow","CssBaseline","exports","description","getColumnName","getColumnType","dataType","dataSource","getColumnFragment","fragment","repositoryTopics","query","endCursor","values","column","init","watchInit","startLogIn","watchStartLogIn","startLoadRepos","watchLoadRepositories","watchRefresh","startLoadUser","watchLoadUser","rootSaga","octokit","Octokit","URLSearchParams","window","location","search","get","put","takeEvery","redirect_uri","origin","pathname","scope","authProxyUrl","assign","select","call","graphql","headers","authorization","accept","console","log","repos","viewer","nodes","id","nameWithOnwer","nameWithOwner","node","topic","stars","stargazers","totalCount","l","primaryLanguage","isPrivate","isArchived","owner","isFork","licenseInfo","nickname","vulnerabilityAlerts","filter","a","issueCount","issues","pullRequestCount","pullRequests","pageInfo","auth","users","getAuthenticated","all","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","useDispatch","run","sagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8de210a4.chunk.js","sourcesContent":["import { ReactNode } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../..\";\n\nexport default function LoginStateSwitch({\n  children,\n  selectedLoginState,\n}: {\n  children: ReactNode;\n  selectedLoginState: boolean;\n}) {\n  const loggedIn = useSelector(\n    (state: RootState) => state.userLoginReducer.login\n  );\n\n  if (loggedIn === selectedLoginState) {\n    return <>{children}</>;\n  }\n  return null;\n}\n","import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass LogIn extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h1\">Log in!</Typography>\n        <Typography paragraph={true}>\n          Please log in with GitHub to start organizing your repositories.\n        </Typography>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LogIn;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Repository } from \"../sagas\";\n\nconst initialGridState = {\n  filteringState: [],\n  sortingState: [],\n  searchState: \"\",\n  columnVisibilityState: [\n    \"isPrivate\",\n    \"isArchived\",\n    \"isFork\",\n    \"owner\",\n    \"licenseNickname\",\n    \"vulnerabilityAlerts\",\n    \"collaborators\",\n    \"issueCount\",\n  ],\n};\n\nexport type GridState = typeof initialGridState;\n\ntype StateType = {\n  gridState: GridState;\n  repositories: Repository[];\n};\n\nconst initialState: StateType = {\n  gridState: initialGridState,\n  repositories: [],\n};\n\nconst mainSlice = createSlice({\n  name: \"mainSlice\",\n  initialState: initialState,\n  reducers: {\n    setRepositories: (state, { payload }) => ({\n      ...state,\n      repositories: [...(state.repositories || []), ...payload.repositories],\n    }),\n    deleteRepositories: (state) => ({\n      ...state,\n      repositories: [],\n    }),\n    setGridState: (state, { gridState }: any) => ({\n      ...state,\n      gridState,\n    }),\n  },\n});\n\nexport const {\n  setRepositories,\n  deleteRepositories,\n  setGridState,\n} = mainSlice.actions;\n\nexport const refresh = createAction(\"REFRESH_REPOSITORIES\");\n\nexport default mainSlice.reducer;\n","import React from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { createStyles, withStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Chip from \"@material-ui/core/Chip\";\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableFilterRow,\n  Toolbar,\n  SearchPanel,\n  ColumnChooser,\n  TableColumnVisibility,\n  PagingPanel,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {\n  FilteringState,\n  IntegratedFiltering,\n  SearchState,\n  SortingState,\n  IntegratedSorting,\n  PagingState,\n  IntegratedPaging,\n} from \"@devexpress/dx-react-grid\";\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\nimport { RootState, useAppDispatch } from \"../index\";\nimport { GridState, setGridState } from \"../reducers\";\n\nconst styles = createStyles({});\n\nconst DateTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => value.toLocaleDateString()}\n    {...props}\n  />\n);\n\nconst LinkTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value: { href, title } }) => (\n      <a href={href}>{title}</a>\n    )}\n    {...props}\n  />\n);\n\nconst ChipListProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }: { value: string[] }) =>\n      value ? (\n        <>\n          {value.map((v) => (\n            <Chip style={{ margin: \"3px\" }} key={v} label={v} />\n          ))}\n        </>\n      ) : null\n    }\n    {...props}\n  />\n);\n\nconst BooleanTypeProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => (\n      <Chip label={value ? \"True\" : \"False\"} />\n    )}\n    {...props}\n  />\n);\n\nconst ArrayLengthProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => value.length}\n    {...props}\n  />\n);\n\nconst CheckBoxProvider = (\n  props: React.ComponentProps<typeof DataTypeProvider>\n) => (\n  <DataTypeProvider\n    formatterComponent={({ value }) => <input type=\"checkbox\" value={value} />}\n    {...props}\n  />\n);\n\nconst tableColumnExtensions = [\n  { columnName: \"topics\", wordWrapEnabled: true },\n  { columnName: \"description\", wordWrapEnabled: true },\n];\n\ntype Collaborator = {\n  login: string;\n};\n\nfunction RepositoryTable() {\n  const gridState = useSelector((state: RootState) => state.reducer.gridState);\n  const repositories = useSelector(\n    (state: RootState) => state.reducer.repositories\n  );\n  const dispatch = useAppDispatch();\n\n  function setFilteringState(filteringState: any) {\n    dispatch(setGridState({ ...gridState, filteringState }));\n  }\n\n  function setSortingState(sortingState: any) {\n    dispatch(setGridState({ ...gridState, sortingState }));\n  }\n\n  function setSearchState(searchState: any) {\n    dispatch(setGridState({ ...gridState, searchState }));\n  }\n\n  function setColumnVisibilityState(columnVisibilityState: any) {\n    dispatch(setGridState({ ...gridState, columnVisibilityState }));\n  }\n\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"selected\",\n            title: \"Selected\",\n            getCellValue: (row) => false,\n          },\n          {\n            name: \"name\",\n            title: \"Name\",\n            getCellValue: (row) => ({\n              href: row.url,\n              title: row.name,\n            }),\n          },\n          {\n            name: \"description\",\n            title: \"Description\",\n          },\n          {\n            name: \"createdAt\",\n            title: \"Created At\",\n            getCellValue: (row) => new Date(row.createdAt),\n          },\n          {\n            name: \"topics\",\n            title: \"Topics\",\n          },\n          {\n            name: \"stars\",\n            title: \"Stars\",\n          },\n          {\n            name: \"language\",\n            title: \"Language\",\n          },\n          {\n            name: \"owner\",\n            title: \"Owner\",\n          },\n          {\n            name: \"isPrivate\",\n            title: \"Private\",\n          },\n          {\n            name: \"isArchived\",\n            title: \"Archived\",\n          },\n          {\n            name: \"isFork\",\n            title: \"Fork\",\n          },\n          {\n            name: \"licenseNickname\",\n            title: \"License\",\n          },\n          {\n            name: \"vulnerabilityAlerts\",\n            title: \"Vulnerability Alerts\",\n          },\n          {\n            name: \"collaborators\",\n            title: \"Collaborators\",\n            getCellValue: (row) =>\n              row.collaborators &&\n              row.collaborators.map(\n                (collaborator: Collaborator) => collaborator.login\n              ),\n          },\n          {\n            name: \"issueCount\",\n            title: \"Open Issue Count\",\n          },\n          {\n            name: \"pullRequestCount\",\n            title: \"Open Pull Request Count\",\n          },\n        ]}\n        rows={repositories}\n      >\n        <DateTypeProvider for={[\"createdAt\"]} />\n        <LinkTypeProvider for={[\"name\"]} />\n        <ChipListProvider for={[\"topics\", \"collaborators\"]} />\n        <BooleanTypeProvider for={[\"isPrivate\", \"isArchived\", \"isFork\"]} />\n        <ArrayLengthProvider for={[\"vulnerabilityAlerts\"]} />\n        <CheckBoxProvider for={[\"selected\"]} />\n        <FilteringState\n          defaultFilters={[]}\n          filters={gridState.filteringState}\n          onFiltersChange={setFilteringState}\n        />\n        <SortingState\n          defaultSorting={[]}\n          sorting={gridState.sortingState}\n          onSortingChange={setSortingState}\n        />\n        <PagingState defaultCurrentPage={0} pageSize={40} />\n        <SearchState\n          value={gridState.searchState}\n          onValueChange={setSearchState}\n        />\n        <IntegratedFiltering />\n        <IntegratedSorting />\n        <IntegratedPaging />\n        <Table columnExtensions={tableColumnExtensions} />\n        <TableHeaderRow showSortingControls />\n        <TableFilterRow showFilterSelector />\n        <TableColumnVisibility\n          hiddenColumnNames={gridState.columnVisibilityState}\n          onHiddenColumnNamesChange={setColumnVisibilityState}\n        />\n        <Toolbar />\n        <SearchPanel />\n        <ColumnChooser />\n        <PagingPanel />\n      </Grid>\n    </Paper>\n  );\n}\n\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\n//   setGridState: (gridState: GridState) =>\n//     dispatch({\n//       type: \"SET_GRID_STATE\",\n//       gridState,\n//     }),\n// });\n\n// const ws = withStyles(styles);\n// const connector = connect(mapStateToProps, mapDispatchToProps);\n// const ConnectedRepositoryTable = connector(RepositoryTable);\nexport default withStyles(styles)(RepositoryTable);\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(StyledRepositoryTable);\n","import RepositoryTable from \"../components/RepositoryTable\";\n\nexport default function ReposPage() {\n  return (\n    <>\n      <RepositoryTable />\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { RootState } from \"..\";\nimport { useSelector } from \"react-redux\";\n\ninterface Repository {\n  topics: string[];\n}\n\nconst prepareTags = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .flatMap((repo) => repo.topics)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\n\nexport default () => {\n  const repositories = useSelector(\n    (state: RootState) => state.reducer.repositories\n  );\n  if (!repositories) {\n    return <p>Loading</p>;\n  }\n  const tags = prepareTags(repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    topicName: key,\n    topicCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"topicName\",\n            title: \"Topic Name\",\n          },\n          {\n            name: \"topicCount\",\n            title: \"Topic Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"topicCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import React from \"react\";\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"..\";\n\ntype Repository = {\n  licenseNickname: string;\n};\n\nconst prepareTags = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .map((repo) => repo.licenseNickname)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\n\ntype LicensesProps = {\n  repositories?: Repository[];\n};\n\nexport default () => {\n  const repositories = useSelector(\n    (state: RootState) => state.reducer.repositories\n  );\n  const tags = prepareTags(repositories);\n  const data = Object.entries(tags).map(([key, value]) => ({\n    license: key,\n    licenseCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"license\",\n            title: \"License\",\n          },\n          {\n            name: \"licenseCount\",\n            title: \"License Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"licenseCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import {\n  Grid,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { SortingState, IntegratedSorting } from \"@devexpress/dx-react-grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"..\";\n\ntype Repository = {\n  language: string;\n};\n\nconst prepareLanguages = (repositories: Repository[]) => {\n  const emptyAccumulator: { [key: string]: number } = {};\n  return repositories\n    .map((repo) => repo.language)\n    .reduce(\n      (acc, el) => ({\n        ...acc,\n        [el]: acc[el] ? acc[el] + 1 : 1,\n      }),\n      emptyAccumulator\n    );\n};\n\nexport default () => {\n  const repositories = useSelector(\n    (state: RootState) => state.reducer.repositories\n  );\n  if (!repositories) {\n    return <p>Loading</p>;\n  }\n  const languages = prepareLanguages(repositories);\n  const data = Object.entries(languages).map(([key, value]) => ({\n    language: key,\n    languageCount: value,\n  }));\n  return (\n    <Paper>\n      <Grid\n        columns={[\n          {\n            name: \"language\",\n            title: \"Language\",\n          },\n          {\n            name: \"languageCount\",\n            title: \"Count\",\n          },\n        ]}\n        rows={data}\n      >\n        <SortingState\n          defaultSorting={[{ columnName: \"languageCount\", direction: \"desc\" }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableHeaderRow showSortingControls />\n      </Grid>\n    </Paper>\n  );\n};\n","import { Route, Switch } from \"react-router\";\nimport LoginStateSwitch from \"../UserLogin/LoginStateSwitch\";\nimport LogInPage from \"../../pages/LogIn\";\nimport ReposPage from \"../../pages/Repos\";\nimport TopicsPage from \"../../pages/Topics\";\nimport LicensesPage from \"../../pages/Licenses\";\nimport LanguagesPage from \"../../pages/Languages\";\n\nexport default function Router() {\n  return (\n    <>\n      <LoginStateSwitch selectedLoginState={false}>\n        <LogInPage />\n      </LoginStateSwitch>\n      <LoginStateSwitch selectedLoginState={true}>\n        <Switch>\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/\"}\n            component={ReposPage}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/topics\"}\n            component={TopicsPage}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/licenses\"}\n            component={LicensesPage}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/languages\"}\n            component={LanguagesPage}\n          />\n        </Switch>\n      </LoginStateSwitch>\n    </>\n  );\n}\n","import {\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { createContext, ReactNode, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst DrawerMenuContext = createContext({\n  drawerOpen: false,\n  toggleDrawer: (_?: boolean) => {},\n});\n\ntype DrawerMenuWrapperProps = {\n  children: ReactNode;\n};\n\nexport function DrawerMenuWrapper({ children }: DrawerMenuWrapperProps) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  function toggleDrawer(newState?: boolean) {\n    if (typeof newState === \"undefined\") {\n      setDrawerOpen(!drawerOpen);\n      return;\n    } else {\n      setDrawerOpen(newState);\n    }\n  }\n\n  return (\n    <DrawerMenuContext.Provider value={{ drawerOpen, toggleDrawer }}>\n      {children}\n    </DrawerMenuContext.Provider>\n  );\n}\n\nexport function DrawerMenuToggleButton(\n  props: React.ComponentProps<typeof IconButton>\n) {\n  const { toggleDrawer } = useContext(DrawerMenuContext);\n  return (\n    <IconButton onClick={() => toggleDrawer()} {...props}>\n      <MenuIcon />\n    </IconButton>\n  );\n}\n\nexport function DrawerMenu() {\n  const { drawerOpen, toggleDrawer } = useContext(DrawerMenuContext);\n  return (\n    <Drawer open={drawerOpen} onClose={() => toggleDrawer(false)}>\n      <div\n        onClick={() => toggleDrawer(false)}\n        onKeyDown={() => toggleDrawer(false)}\n      >\n        <List>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/\"}>\n              <ListItemText primary=\"Repositories\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/topics\"}>\n              <ListItemText primary=\"Topics\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/licenses\"}>\n              <ListItemText primary=\"Licenses\" />\n            </Link>\n          </ListItem>\n          <ListItem button>\n            <Link to={process.env.PUBLIC_URL + \"/languages\"}>\n              <ListItemText primary=\"Languages\" />\n            </Link>\n          </ListItem>\n        </List>\n      </div>\n    </Drawer>\n  );\n}\n","import { createSlice, createAction } from \"@reduxjs/toolkit\";\n\ntype GitHubUser = {\n  login: string;\n};\n\ntype InitialState = {\n  accessToken?: string;\n  login: boolean;\n  user?: GitHubUser;\n};\n\nconst initialState: InitialState = {\n  accessToken: undefined,\n  login: false,\n};\n\nexport const userLoginSlice = createSlice({\n  name: \"userLoginSlice\",\n  initialState,\n  reducers: {\n    setAccessToken: (_, action) => ({\n      accessToken: action.payload.access_token,\n      login: true,\n    }),\n    setUser: (state, { payload }) => ({\n      ...state,\n      user: payload.user,\n    }),\n  },\n});\n\nexport const { setAccessToken, setUser } = userLoginSlice.actions;\nexport const startLogin = createAction(\"START_LOG_IN\");\n\nexport default userLoginSlice.reducer;\n","import { Button } from \"@material-ui/core\";\nimport { ComponentProps } from \"react\";\nimport { useAppDispatch } from \"../..\";\nimport LoginStateSwitch from \"./LoginStateSwitch\";\nimport { startLogin } from \"./userLoginSlice\";\n\nexport default function LoginButton(props: ComponentProps<typeof Button>) {\n  const dispatch = useAppDispatch();\n  return (\n    <LoginStateSwitch selectedLoginState={false}>\n      <Button\n        onClick={() => {\n          dispatch(startLogin());\n        }}\n        {...props}\n      >\n        Login\n      </Button>\n    </LoginStateSwitch>\n  );\n}\n","import { refresh } from \"../../reducers\";\n\nimport LoginButton from \"../UserLogin/LoginButton\";\nimport LoginStateSwitch from \"../UserLogin/LoginStateSwitch\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport { useAppDispatch } from \"../..\";\nimport { DrawerMenuToggleButton } from \"../DrawerMenu\";\n\nconst styles = () => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\nfunction TopNav({ classes }: WithStyles<typeof styles>) {\n  const dispatch = useAppDispatch();\n  return (\n    <AppBar>\n      <Toolbar>\n        <LoginStateSwitch selectedLoginState={true}>\n          <DrawerMenuToggleButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          />\n        </LoginStateSwitch>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          GitHub Repo Organizer\n        </Typography>\n        <LoginButton color=\"inherit\" />\n        <LoginStateSwitch selectedLoginState={true}>\n          <Button onClick={() => dispatch(refresh())} color=\"inherit\">\n            Refresh\n          </Button>\n        </LoginStateSwitch>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default withStyles(styles)(TopNav);\n","import { Theme, WithStyles, withStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Routes from \"./features/Routes\";\nimport { DrawerMenuWrapper, DrawerMenu } from \"./features/DrawerMenu\";\nimport TopNav from \"./features/TopNav\";\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n});\n\nfunction App({ classes }: WithStyles<typeof styles>) {\n  return (\n    <DrawerMenuWrapper>\n      <CssBaseline />\n      <Router>\n        <div className=\"App\">\n          <TopNav />\n          <DrawerMenu />\n          <main className={classes.content}>\n            <div className={classes.appBarSpacer} />\n            <Routes />\n          </main>\n        </div>\n      </Router>\n    </DrawerMenuWrapper>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import description from \"./description\";\nimport name from \"./name\";\nimport createdAt from \"./createdAt\";\nimport repositoryTopics from \"./repositoryTopics\";\nimport privateColumn from \"./private\";\n\nexport type ColumnType = {\n  dataType: string;\n  dataSource: \"GitHubGraphQL\";\n};\n\nexport type ColumnFragment = {\n  name: string;\n  fragment: string;\n};\n\ntype Column = {\n  getColumnName: () => string;\n  getColumnType: () => ColumnType;\n  getColumnFragment: () => ColumnFragment;\n};\n\nconst exports: { [key: string]: Column } = {\n  description,\n  name,\n  createdAt,\n  repositoryTopics,\n  // privateColumn,\n};\n\nexport default exports;\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"description\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"description\",\n    fragment: \"fragment description on Repository { description } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"name\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"name\",\n    fragment: \"fragment name on Repository { name } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"createdAt\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"createdAt\",\n    fragment: \" fragment createdAt on Repository { createdAt } \",\n  }),\n};\n","import { ColumnType, ColumnFragment } from \".\";\n\nexport default {\n  getColumnName: () => \"repositoryTopics\",\n  getColumnType: (): ColumnType => ({\n    dataType: \"string\",\n    dataSource: \"GitHubGraphQL\",\n  }),\n  getColumnFragment: (): ColumnFragment => ({\n    name: \"repositoryTopics\",\n    fragment:\n      \"fragment repositoryTopics on Repository { repositoryTopics(first:100) { nodes { topic { id name } } } }\",\n  }),\n};\n","import columns from \"../columns\";\n\nconst query = (endCursor: string) => `query {\n    viewer {\n      repositories (first:100${\n        endCursor ? ', after:\"' + endCursor + '\"' : \"\"\n      }) {\n        pageInfo {\n          endCursor\n        }\n        totalCount\n        nodes {\n          id\n          ${Object.values(columns).map(\n            (column) => `...${column.getColumnFragment().name}\\n`\n          )}\n          ...stargazers\n          ...primaryLanguage\n          ...private\n          ...archived\n          ...issues\n          ...pullRequestCount\n          ...owner\n          ...nameWithOwner\n          ...url\n          ...fork\n          ...licenses\n          ...vulnerabilityAlerts\n          ...collaborators\n        }\n      }\n    }\n  }\n\n${Object.values(columns).map((column) => column.getColumnFragment().fragment)}\n\nfragment stargazers on Repository {\n  stargazers {\n    totalCount\n  }\n}\n\nfragment primaryLanguage on Repository {\n  primaryLanguage {\n    name\n  }\n}\n\nfragment private on Repository {\n  isPrivate\n}\n\nfragment archived on Repository {\n  isArchived\n}\n\nfragment issues on Repository {\n  issues (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment pullRequestCount on Repository {\n  pullRequests (states: OPEN) {\n    totalCount\n  }\n}\n\nfragment owner on Repository {\n  owner {\n    login\n  }\n}\n\nfragment nameWithOwner on Repository {\n  nameWithOwner\n}\n\nfragment url on Repository {\n  url\n}\n\nfragment fork on Repository {\n  isFork\n}\n\nfragment licenses on Repository {\n  licenseInfo {\n    name\n    nickname\n  }\n}\n\nfragment vulnerabilityAlerts on Repository {\n  vulnerabilityAlerts (first:50){\n    nodes {\n      securityVulnerability {\n        package {\n          name\n        }\n        advisory {\n          description\n          summary\n        }\n      }\n    }\n  }\n}\n\nfragment collaborators on Repository {\n  collaborators (first: 50){\n    nodes {\n      name\n      login\n    }\n  }\n}\n`;\n\nexport default query;\n","import { put, takeEvery, all, select, call } from \"redux-saga/effects\";\nimport { Octokit } from \"@octokit/rest\";\nimport { graphql } from \"@octokit/graphql\";\nimport query from \"../api/gitHubGraphQlQuery\";\nimport { Data } from \"../types/gitHubGraphQlQueryResponseType\";\nimport { deleteRepositories, setRepositories } from \"../reducers\";\nimport { RootState } from \"..\";\nimport { setAccessToken, setUser } from \"../features/UserLogin/userLoginSlice\";\n\nlet octokit = new Octokit();\n\nexport type Repository = {\n  id: string;\n  name: string;\n  nameWithOwner: string;\n  description: string;\n  createdAt: Date;\n  topics: string[];\n  stars: number;\n  language: string;\n  isPrivate: boolean;\n  isArchived: boolean;\n  url: string;\n  owner: string;\n  isFork: boolean;\n  licenseNickname: string;\n  vulnerabilityAlerts: unknown[];\n  collaborators: string[] | null;\n  issueCount: number;\n  pullRequestCount: number;\n};\n\nconst authURL = \"https://github-auth-backend-hugh.glitch.me/start_auth\";\n\nexport function* init() {\n  // get from local storage or get from url\n  const query = new URLSearchParams(window.location.search);\n\n  if (query.get(\"access_token\")) {\n    yield put(setAccessToken({ access_token: query.get(\"access_token\") }));\n    yield startLoadUser();\n  }\n}\n\nexport function* watchInit() {\n  yield takeEvery(\"INIT\", init);\n}\n\nexport function* startLogIn() {\n  const query = {\n    redirect_uri: window.location.origin + window.location.pathname,\n    scope: \"repo\",\n  };\n\n  const authProxyUrl = `${authURL}?${new URLSearchParams(query)}`;\n\n  yield window.location.assign(authProxyUrl);\n}\n\nexport function* watchStartLogIn() {\n  yield takeEvery(\"START_LOG_IN\", startLogIn);\n}\n\nexport function* startLoadRepos(endCursor?: string): any {\n  const accessToken = yield select(\n    (state: RootState) => state.userLoginReducer.accessToken\n  );\n  const user = yield select(\n    (state: RootState) => state.userLoginReducer.user?.login\n  );\n\n  let data: Data;\n\n  try {\n    data = yield call(() =>\n      graphql<Data>({\n        query: query(endCursor ?? \"\"),\n        headers: {\n          authorization: `token ${accessToken}`,\n          accept: \"application/vnd.github.vixen-preview+json\",\n        },\n      })\n    );\n  } catch (error) {\n    console.log(error);\n    data = error.data;\n  }\n\n  const repos = data.viewer.repositories.nodes.map((repo) => ({\n    id: repo.id,\n    name: repo.name,\n    nameWithOnwer: repo.nameWithOwner,\n    description: repo.description,\n    createdAt: repo.createdAt,\n    topics: repo.repositoryTopics.nodes.map((node) => node.topic.name),\n    stars: repo.stargazers.totalCount,\n    language: ((l) => l && l.name)(repo.primaryLanguage),\n    isPrivate: repo.isPrivate,\n    isArchived: repo.isArchived,\n    url: repo.url,\n    owner: repo.owner.login,\n    isFork: repo.isFork,\n    licenseNickname:\n      repo.licenseInfo && (repo.licenseInfo.nickname || repo.licenseInfo.name),\n    vulnerabilityAlerts: repo.vulnerabilityAlerts.nodes,\n    collaborators:\n      repo.collaborators &&\n      repo.collaborators.nodes.filter((a) => a.login !== user),\n    issueCount: repo.issues.totalCount,\n    pullRequestCount: repo.pullRequests.totalCount,\n  }));\n\n  yield put(setRepositories({ repositories: repos }));\n\n  const repoCount = yield select(\n    (state: RootState) => state.reducer.repositories?.length\n  );\n  if (repoCount < data.viewer.repositories.totalCount) {\n    yield startLoadRepos(data.viewer.repositories.pageInfo.endCursor);\n  }\n}\n\nexport function* watchLoadRepositories() {\n  yield takeEvery(\"START_LOAD_REPOSITORIES\", startLoadRepos);\n}\n\nfunction* refresh() {\n  yield put(deleteRepositories());\n  yield startLoadRepos();\n}\n\nexport function* watchRefresh() {\n  yield takeEvery(\"REFRESH_REPOSITORIES\", refresh);\n}\n\nexport function* startLoadUser(): any {\n  const accessToken = yield select(\n    (state: RootState) => state.userLoginReducer.accessToken\n  );\n\n  octokit = new Octokit({\n    auth: `token ${accessToken}`,\n  });\n\n  const { data } = yield call(() => octokit.users.getAuthenticated());\n\n  yield put(setUser({ user: data }));\n\n  yield startLoadRepos();\n}\n\nexport function* watchLoadUser() {\n  yield takeEvery(\"START_LOAD_USER\", startLoadUser);\n}\nexport default function* rootSaga() {\n  yield all([\n    watchInit(),\n    watchStartLogIn(),\n    watchLoadRepositories(),\n    watchLoadUser(),\n    watchRefresh(),\n  ]);\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport userLoginReducer from \"./features/UserLogin/userLoginSlice\";\nimport reducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    reducer,\n    userLoginReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nsagaMiddleware.run(sagas);\nstore.dispatch({ type: \"INIT\" });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}